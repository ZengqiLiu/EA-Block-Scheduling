<style>
body {
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
    color: #333;
    margin: 0;
    padding: 20px;
  }

  h1 {
    color: #800000; /* Maroon color */
    text-align: center;
    font-size: 2em;
    margin-top: 20px;
    margin-bottom: 20px;
  }

  table {
    width: 80%;
    margin: 0 auto;
    border-collapse: collapse;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    background-color: #fff;
  }

  th, td {
    border: 1px solid #ddd;
    padding: 12px;
    text-align: left;
  }

  th {
    background-color: #800000; /* Maroon color */
    color: white;
  }

  tr:nth-child(even) {
    background-color: #f2f2f2;
  }

  tr:hover {
    background-color: #ddd;
  }

  .block-to-select {
    flex: 0 0 auto;
    width: 400px;
    min-height: 250px;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    background-color: white;
  }
  .block-to-select.disabled {
    background-color: lightgray;
  }

  .block-container {
    width: 80%;
    margin: 20px auto;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
  }

  .button {
    display: block;
    margin: 20px auto;
    padding: 12px 24px;
    background-color: #800000; /* Maroon color */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease;
  }

  .button:hover {
    background-color: #6a0000; /* Darker maroon for hover */
  }

  #modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
    display: none;
  }
  
  #modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px 40px;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    z-index: 1000;
    text-align: center;
    display: none;
  }

  
</style>

<h1>Select Your Block</h1>

<!-- Blocks -->
<div class="block-container">
  <% @block_count.times do |i| %>
    <%= render partial: "select_block/block_to_select", locals: { block_number: i + 1 } %>
  <% end %>
</div>


<!-- Select Block Button -->
<button id="select-block-button" class="button">Select Block</button>

<!-- Hidden Modal overlay for successful selection -->
<div id="modal-overlay" style="display: none;"></div>

<!-- Hidden Modal for successful selection -->
<div id="modal" style="display: none;">
  <p id="modal-message"></p>
  <div class="modal-button-container">
    <button id="modal-select-again" class="button">Select Again</button>
    <button id="modal-back-to-schedule" class="button">Back to my schedule</button>
  </div>
</div>

<script>
  const maxSelectedBlocks = 1;
  const checkboxes = document.querySelectorAll('.block-to-select input[type="checkbox"]');
  const selectButton = document.getElementById('select-block-button');

  const modalOverlay = document.getElementById('modal-overlay');
  const modal = document.getElementById('modal');
  const modalMessage = document.getElementById('modal-message');
  const modalSelectAgain = document.getElementById('modal-select-again');
  const modalBackToSchedule = document.getElementById('modal-back-to-schedule');


  function disableMoreSelections() {
    let selectedCount = 0;
    checkboxes.forEach(checkbox => {
      if (checkbox.checked) {
        selectedCount++;
      }
    });

    // Grey out unselected blocks if max selected blocks is reached
    checkboxes.forEach(checkbox => {
      const currentBlock = checkbox.closest('.block-to-select');
      if (selectedCount >= maxSelectedBlocks && !checkbox.checked) {
        currentBlock.classList.add('disabled');
        checkbox.disabled = true;
      } else {
        currentBlock.classList.remove('disabled');
        checkbox.disabled = false;
      }
    });

    // Disable the button if no blocks are selected
    if (selectedCount === 0) {
      selectButton.disabled = true;
      selectButton.style.backgroundColor = 'gray';
      selectButton.style.cursor = 'not-allowed';
      selectButton.title = 'Please select a block';
    } else {
      selectButton.disabled = false;
      selectButton.style.backgroundColor = '#800000';
      selectButton.style.cursor = 'pointer';
      selectButton.title = '';
    }
  }
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', disableMoreSelections);
  });
  disableMoreSelections();

  selectButton.addEventListener('click', () => {
    const selectedBlocks = [];
    checkboxes.forEach(checkbox => {
      if (checkbox.checked) {
        selectedBlocks.push(checkbox.value);
      }
    });

    if (selectedBlocks.length > 0) {
      let message;
      if (selectedBlocks.length === 1) {
        message = `You have successfully selected block ${selectedBlocks[0]}.`;
      } else {
        message = `You have successfully selected blocks ${selectedBlocks.join(', ')}.`;
      }
      modalMessage.textContent = message;
      modal.style.display = 'block';
      modalOverlay.style.display = 'block';
    }
  });

  modalSelectAgain.addEventListener('click', () => {
    modal.style.display = 'none';
    modalOverlay.style.display = 'none';
  });

  modalBackToSchedule.addEventListener('click', () => {
    window.location.href = '/schedule_viewer';
  });

</script>
